package rules.recommendation;

import com.ftn.sbnz.model.Server;
import com.ftn.sbnz.model.SearchFilters;
import com.ftn.sbnz.model.User;
import com.ftn.sbnz.model.Rental;
import com.ftn.sbnz.model.Rating;

import java.util.Date;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.lang.Math;

declare HeavyMlTraining end
declare EnterpriseMlProject end
declare SmallWebTraffic end
declare CriticalDatabase end
declare EcoStreaming end

function int requiredBandwidth(int users) {
    if (users <= 100) {
        return 200;
    } else if (users <= 500) {
        return 500;
    }
    return 1000;
}

function boolean withinDays(Date timestamp, int days) {
    if (timestamp == null) {
        return false;
    }
    Instant cutoff = Instant.now().minus(days, ChronoUnit.DAYS);
    return timestamp.toInstant().isAfter(cutoff);
}

function boolean multiZoneCandidate(Server server) {
    return server != null && server.isHighAvailability() && server.isDdosProtection();
}

rule "Seed baseline score"
    no-loop true
when
    $s: Server()
then
    modify($s) { setScore(15) };
end

rule "Purpose alignment"
    no-loop true
when
    SearchFilters($purpose : purpose != null)
    $s: Server(purpose == $purpose)
then
    modify($s) { setScore($s.getScore() + 25) };
end

rule "Purpose mismatch penalty"
    no-loop true
when
    SearchFilters($purpose : purpose != null)
    $s: Server(purpose != $purpose)
then
    modify($s) { setScore($s.getScore() - 18) };
end

rule "CPU requirement met"
    no-loop true
when
    SearchFilters(cpuPerformance != null, $cpu : cpuPerformance)
    $s: Server()
    eval($s.getCpuPerformance().ordinal() >= $cpu.ordinal())
then
    modify($s) { setScore($s.getScore() + 15) };
end

rule "CPU headroom bonus"
    no-loop true
when
    SearchFilters(cpuPerformance != null, $cpu : cpuPerformance)
    $s: Server()
    eval($s.getCpuPerformance().ordinal() > $cpu.ordinal())
then
    modify($s) { setScore($s.getScore() + 5) };
end

rule "vCPU capacity bonus"
    no-loop true
when
    SearchFilters(minVcpuCount > 0, $min : minVcpuCount)
    $s: Server(vcpuCount >= $min)
then
    int headroom = Math.max(0, $s.getVcpuCount() - $min);
    int bonus = Math.min(12, headroom * 2);
    if (bonus > 0) {
        modify($s) { setScore($s.getScore() + bonus) };
    }
end

rule "GPU requirement satisfied"
    no-loop true
when
    SearchFilters(gpuRequired == true, $minVram : minGpuVram)
    $s: Server(gpuModel != Server.GpuModel.NONE, gpuVram >= $minVram)
then
    int headroom = Math.max(0, $s.getGpuVram() - $minVram);
    int bonus = 25 + Math.min(10, headroom / 4);
    modify($s) { setScore($s.getScore() + bonus) };
end

rule "Optional GPU advantage"
    no-loop true
when
    SearchFilters(gpuRequired == false)
    $s: Server(gpuModel != Server.GpuModel.NONE)
then
    modify($s) { setScore($s.getScore() + 6) };
end

rule "RAM capacity satisfied"
    no-loop true
when
    SearchFilters(minRam > 0, $min : minRam)
    $s: Server(ram >= $min)
then
    modify($s) { setScore($s.getScore() + 12) };
end

rule "Storage capacity satisfied"
    no-loop true
when
    SearchFilters(minStorageCapacity > 0, $min : minStorageCapacity)
    $s: Server(storageCapacity >= $min)
then
    modify($s) { setScore($s.getScore() + 8) };
end

rule "Preferred storage type"
    no-loop true
when
    SearchFilters(storageType != null, $type : storageType)
    $s: Server(storageType == $type)
then
    modify($s) { setScore($s.getScore() + 6) };
end

rule "Encrypted storage preference"
    no-loop true
when
    SearchFilters(encryptedStorage == true)
    $s: Server(encryptedStorage == true)
then
    modify($s) { setScore($s.getScore() + 8) };
end

rule "DDoS protection preference"
    no-loop true
when
    SearchFilters(ddosProtection == true)
    $s: Server(ddosProtection == true)
then
    modify($s) { setScore($s.getScore() + 7) };
end

rule "High availability preference"
    no-loop true
when
    SearchFilters(highAvailability == true)
    $s: Server(highAvailability == true)
then
    modify($s) { setScore($s.getScore() + 9) };
end

rule "Region alignment"
    no-loop true
when
    SearchFilters(region != null, $region : region)
    $s: Server(region == $region)
then
    modify($s) { setScore($s.getScore() + 12) };
end

rule "Eco priority boost"
    no-loop true
when
    SearchFilters(ecoPriority == true)
    $s: Server(ecoFriendly == true)
then
    modify($s) { setScore($s.getScore() + 10) };
end

rule "Network bandwidth satisfied"
    no-loop true
when
    SearchFilters(minNetworkBandwidth > 0, $min : minNetworkBandwidth)
    $s: Server(networkBandwidth >= $min)
then
    modify($s) { setScore($s.getScore() + 8) };
end

rule "Concurrent user throughput"
    no-loop true
when
    SearchFilters(concurrentUsers > 0, $users : concurrentUsers)
    $s: Server($bandwidth : networkBandwidth)
    eval($bandwidth >= requiredBandwidth($users))
then
    modify($s) { setScore($s.getScore() + 7) };
end


rule "Budget friendly low"
    no-loop true
when
    SearchFilters(budget == SearchFilters.Budget.LOW)
    $s: Server(pricePerMonth > 0, pricePerMonth <= 100)
then
    modify($s) { setScore($s.getScore() + 12) };
end

rule "Budget balanced medium"
    no-loop true
when
    SearchFilters(budget == SearchFilters.Budget.MEDIUM)
    $s: Server(pricePerMonth > 0, pricePerMonth <= 220)
then
    modify($s) { setScore($s.getScore() + 10) };
end

rule "Budget premium high"
    no-loop true
when
    SearchFilters(budget == SearchFilters.Budget.HIGH)
    $s: Server(pricePerMonth >= 250)
then
    modify($s) { setScore($s.getScore() + 7) };
end

rule "Long term rental bonus"
    no-loop true
when
    SearchFilters(rentalDuration >= 30)
    $s: Server()
then
    modify($s) { setScore($s.getScore() + 5) };
end

rule "Enterprise rental bonus"
    no-loop true
when
    SearchFilters(rentalDuration >= 180, budget == SearchFilters.Budget.HIGH)
    $s: Server()
then
    modify($s) { setScore($s.getScore() + 6) };
end

rule "Short term flexibility bonus"
    no-loop true
when
    SearchFilters(rentalDuration > 0, rentalDuration < 7)
    $s: Server(pricePerHour > 0)
then
    modify($s) { setScore($s.getScore() + 4) };
end

rule "Status bronze discount"
    no-loop true
when
    User(status == User.UserStatus.BRONZE)
    $s: Server(pricePerMonth > 0, pricePerMonth <= 150)
then
    modify($s) { setScore($s.getScore() + 4) };
end

rule "Status silver discount"
    no-loop true
when
    User(status == User.UserStatus.SILVER)
    $s: Server(pricePerMonth > 0, pricePerMonth <= 240)
then
    modify($s) { setScore($s.getScore() + 5) };
end

rule "Status gold performance"
    no-loop true
when
    User(status == User.UserStatus.GOLD)
    $s: Server(cpuPerformance == Server.CpuPerformance.HIGH)
then
    modify($s) { setScore($s.getScore() + 8) };
end

rule "Scenario heavy ML training"
    salience 5
when
    // consider dataset size explicitly in addition to resource thresholds
    SearchFilters(purpose == Server.Purpose.ML_TRAINING,
                  (datasetSizeGb > 100 || minStorageCapacity >= 100 || minGpuVram >= 16 || minNetworkBandwidth >= 800))
then
    insertLogical(new HeavyMlTraining());
end

rule "Scenario enterprise ML project"
    salience 4
when
    HeavyMlTraining()
    SearchFilters(budget == SearchFilters.Budget.HIGH,
                  rentalDuration >= 180,
                  region == Server.Region.EU)
then
    insertLogical(new EnterpriseMlProject());
end

rule "Scenario small web traffic"
    salience 4
when
    SearchFilters(purpose == Server.Purpose.WEB_APP,
                  concurrentUsers > 0,
                  concurrentUsers <= 200)
then
    insertLogical(new SmallWebTraffic());
end

rule "Scenario critical database"
    salience 4
when
    SearchFilters(purpose == Server.Purpose.DATABASE, highAvailability == true)
then
    insertLogical(new CriticalDatabase());
end

rule "Scenario eco streaming"
    salience 4
when
    SearchFilters(purpose == Server.Purpose.STREAMING, ecoPriority == true)
then
    insertLogical(new EcoStreaming());
end

rule "ML training infrastructure bonus"
    no-loop true
when
    HeavyMlTraining()
    $s: Server(purpose == Server.Purpose.ML_TRAINING,
              gpuModel != Server.GpuModel.NONE,
              storageType == Server.StorageType.NVME,
              networkBandwidth >= 800)
then
    int bonus = 18;
    if ($s.getGpuVram() >= 24) {
        bonus += 4;
    }
    if ($s.getStorageCapacity() >= 1000) {
        bonus += 3;
    }
    modify($s) { setScore($s.getScore() + bonus) };
end

// Additional ML bonus: prefer dedicated CPU + high network for heavy training workloads
rule "ML heavy dedicated CPU & bandwidth bonus"
    no-loop true
when
    HeavyMlTraining()
    $s: Server(purpose == Server.Purpose.ML_TRAINING,
              dedicatedCpu == true,
              networkBandwidth >= 800)
then
    modify($s) { setScore($s.getScore() + 10) };
end

rule "Enterprise ML hybrid preference"
    no-loop true
when
    EnterpriseMlProject()
    // If GDPR is required by the filters, prefer providers that support on-prem or hybrid
    SearchFilters(gdprRequired == true)
    $s: Server(purpose == Server.Purpose.ML_TRAINING,
              encryptedStorage == true,
              highAvailability == true,
              ddosProtection == true)
    eval($s.isOnPremiseAvailable() || $s.isHybridDeployment())
then
    // larger boost for on-prem/hybrid-capable providers in GDPR-sensitive enterprise ML
    modify($s) { setScore($s.getScore() + 18) };
end

rule "Small web autoscaling preference"
    no-loop true
when
    SmallWebTraffic()
    $s: Server(purpose == Server.Purpose.WEB_APP,
              vcpuCount <= 8,
              pricePerMonth <= 180,
              autoscalingCapable == true)
then
    modify($s) { setScore($s.getScore() + 10) };
end

rule "Web app high availability preference"
    no-loop true
when
    SearchFilters(purpose == Server.Purpose.WEB_APP, highAvailability == true)
    $s: Server(purpose == Server.Purpose.WEB_APP,
              highAvailability == true,
              eval(multiZoneCandidate($s)))
then
    modify($s) { setScore($s.getScore() + 9) };
end

rule "Data analytics compute focus"
    no-loop true
when
    SearchFilters(purpose == Server.Purpose.DATA_ANALYTICS)
    $s: Server(purpose == Server.Purpose.DATA_ANALYTICS,
              vcpuCount >= 16,
              storageType == Server.StorageType.NVME,
              networkBandwidth >= 600)
then
    modify($s) { setScore($s.getScore() + 14) };
end

rule "Critical database preference"
    no-loop true
when
    CriticalDatabase()
    $s: Server(purpose == Server.Purpose.DATABASE,
              storageType == Server.StorageType.NVME,
              encryptedStorage == true,
              highAvailability == true,
              managedService == true,
              replicationSupport == true,
              storageIops >= 800)
then
    modify($s) { setScore($s.getScore() + 15) };
end

rule "Critical database multi-zone preference"
    no-loop true
when
    CriticalDatabase()
    $s: Server(purpose == Server.Purpose.DATABASE,
              multiZone == true)
then
    modify($s) { setScore($s.getScore() + 7) };
end

rule "Database replication preference"
    no-loop true
when
    SearchFilters(purpose == Server.Purpose.DATABASE, highAvailability == true)
    $s: Server(purpose == Server.Purpose.DATABASE,
              highAvailability == true,
              ddosProtection == true)
then
    modify($s) { setScore($s.getScore() + 8) };
end

rule "ML inference latency"
    no-loop true
when
    SearchFilters(purpose == Server.Purpose.ML_INFERENCE)
    $s: Server(purpose == Server.Purpose.ML_INFERENCE,
              gpuModel != Server.GpuModel.NONE,
              gpuVram >= 8,
              networkBandwidth >= 400)
then
    modify($s) { setScore($s.getScore() + 13) };
end

rule "Streaming throughput preference"
    no-loop true
when
    SearchFilters(purpose == Server.Purpose.STREAMING)
    $s: Server(purpose == Server.Purpose.STREAMING,
              networkBandwidth >= 1000,
              ddosProtection == true)
then
    modify($s) { setScore($s.getScore() + 14) };
end

rule "Eco streaming preference"
    no-loop true
when
    EcoStreaming()
    $s: Server(purpose == Server.Purpose.STREAMING,
              ecoFriendly == true,
              energyEfficient == true,
              networkBandwidth >= 800)
then
    modify($s) { setScore($s.getScore() + 10) };
end

rule "Provider loyalty rentals"
    no-loop true
when
    $u: User()
    Number(intValue >= 10, $total : intValue) from accumulate(
        Rental(user == $u,
               $start : startDate,
               eval(withinDays($start, 365))),
        count(1)
    )
    $s: Server(provider != null, $providerName : provider.name)
    eval($providerName != null)
    Number($providerCount : intValue) from accumulate(
        Rental(user == $u,
               server != null,
               eval(server.getProvider() != null && server.getProvider().getName() != null && server.getProvider().getName().equals($providerName)),
               $start : startDate,
               eval(withinDays($start, 365))),
        count(1)
    )
    eval($providerCount >= Math.ceil($total * 0.2))
then
    modify($s) { setScore($s.getScore() + 9) };
end

rule "Provider loyalty ratings"
    no-loop true
when
    $u: User()
    Number(intValue >= 10, $highRatings : intValue) from accumulate(
        Rating(user == $u,
               score >= 4,
               $time : timestamp,
               eval(withinDays($time, 365))),
        count(1)
    )
    $s: Server(provider != null, $providerName : provider.name)
    eval($providerName != null)
    Number($positiveForProvider : intValue) from accumulate(
        Rating(user == $u,
               score >= 4,
               server != null,
               eval(server.getProvider() != null && server.getProvider().getName() != null && server.getProvider().getName().equals($providerName)),
               $time : timestamp,
               eval(withinDays($time, 365))),
        count(1)
    )
    eval($positiveForProvider >= Math.ceil($highRatings * 0.2))
then
    modify($s) { setScore($s.getScore() + 8) };
end
